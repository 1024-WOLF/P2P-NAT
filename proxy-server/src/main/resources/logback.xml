<!--  日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出  -->
<!--  scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true  -->
<!--  scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。  -->
<!--  debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。  -->
<configuration scan="true" scanPeriod="10 seconds">
    <contextName>P2P-NAT</contextName>
    <property name="log.path" value="${base.dir}/logs"/>
    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 输出到文件 -->
    <!--  时间滚动输出 level为 DEBUG 级别及以上的日志  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--  日志记录器的滚动策略，按日期，按大小记录  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  每天日志归档路径以及格式  -->
            <fileNamePattern>${log.path}/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!--  此日志文件记录debug级别以上的日志  -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
        </filter>
    </appender>
    <!--  时间滚动输出 level为 ERROR 日志  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--  日志记录器的滚动策略，按日期，按大小记录  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!--  此日志文件只记录ERROR级别的  -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!--当将要打印的日志级别符合<level></level>中定义的级别时，就输出-->
            <onMatch>ACCEPT</onMatch>
            <!--当将要打印的日志级别不符合<level></level>中定义的级别时，会拒绝输出-->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--
            <logger>:用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
                    仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name:用来指定受此logger约束的某一个包或者具体的某一个类。
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
                  还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
                  如果未设置此属性，那么当前logger将会继承上级的级别。
            addtivity:是否向上级logger传递打印信息。默认是true。
     -->
    <logger level="ERROR" name="io.netty" additivity="false">
        <appender-ref ref="ERROR_FILE"/>
    </logger>
    <logger level="ERROR" name="com.google.gson" additivity="false">
        <appender-ref ref="ERROR_FILE"/>
    </logger>
    <logger level="ERROR" name="com.anji.captcha" additivity="false">
        <appender-ref ref="ERROR_FILE"/>
    </logger>
    <logger level="INFO" name="org.github.$1024wolf">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEBUG_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>
    <!--
            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
                不能设置为INHERITED或者同义词NULL。默认是DEBUG可以包含零个或多个元素，标识这个appender将会添加到这个logger。
     -->
<!--    <root level="INFO">-->
<!--    </root>-->
</configuration>